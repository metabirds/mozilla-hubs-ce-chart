# Default values for reticulum.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: mozillareality/ret
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "stable-798"

ports:
  - containerPort: 9100

annotations:
  cluster-autoscaler.kubernetes.io/safe-to-evict: "true"

# env:
  

revisionHistoryLimit: 1

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  privileged: true
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  # annotations:
  #   kubernetes.io/ingress.class: haproxy
  #   haproxy.org/response-set-header: |
  #     access-control-allow-origin "https://{{ .Values.global.domain }}"
  #   haproxy.org/path-rewrite: /api-internal(.*) /_drop_

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1

nodeSelector: {}

tolerations: []

affinity: {}

config:
  enabled: true
  name: ret-config
  data:
    config.toml.template: |
      [peerage]
      dns_name = "ret.<POD_NS>.svc.cluster.local"
      app_name = "ret"

      [ret."Elixir.Ret"]
      pool = "hubs"

      [ret."Elixir.RetWeb.Plugs.DashboardHeaderAuthorization"]
      dashboard_access_key = "<DASHBOARD_ACCESS_KEY>"

      [ret."Elixir.Ret.DiscordClient"]
      client_id = ""
      client_secret = ""
      bot_token = ""

      [ret."Elixir.RetWeb.Endpoint".https]
      port = 4000
      certfile = "/ret/cert.pem"
      cacertfile = "/ret/cacert.pem"
      keyfile = "/ret/key.pem"

      [ret."Elixir.RetWeb.Endpoint"]
      allowed_origins = "*"
      secret_key_base = "<PHX_KEY>"
      allow_crawlers = true

      [ret."Elixir.RetWeb.Endpoint".secondary_url]

      [ret."Elixir.RetWeb.Endpoint".cors_proxy_url]
      host = "cors.<HUB_DOMAIN>"
      port = 443

      [ret."Elixir.RetWeb.Endpoint".imgproxy_url]
      host = "<IMG_PROXY>"
      port = 5000

      [ret."Elixir.RetWeb.Endpoint".assets_url]
      host = "assets.<HUB_DOMAIN>"
      port = 443

      [ret."Elixir.RetWeb.Endpoint".link_url]
      host = "hubs-link.local"

      [ret."Elixir.RetWeb.Endpoint".url]
      host = "<HUB_DOMAIN>"
      port = 443

      [ret."Elixir.RetWeb.Endpoint".static_url]
      host = "<HUB_DOMAIN>"

      [ret."Elixir.Ret.Repo"]
      username = "<DB_USER>"
      password = "<DB_PASS>"
      database = "<DB_NAME>"
      hostname = "<DB_HOST_T>"
      template = "template0"
      pool_size = 10
      port = 5432

      [ret."Elixir.Ret.SessionLockRepo"]
      username = "<DB_USER>"
      password = "<DB_PASS>"
      database = "<DB_NAME>"
      hostname = "<DB_HOST>"
      template = "template0"

      port = 5432

      [ret."Elixir.Ret.Locking".session_lock_db]
      username = "<DB_USER>"
      password = "<DB_PASS>"
      database = "<DB_NAME>"
      hostname = "<DB_HOST>"
      port = 5432

      [ret."Elixir.Ret.Habitat"]
      ip = "127.0.0.1"
      http_port = 9631

      [ret."Elixir.Ret.JanusLoadStatus"]
      default_janus_host = "stream.<HUB_DOMAIN>"
      janus_service_name = ""
      janus_admin_secret = ""
      janus_admin_port = 7000
      janus_port = 4443

      [ret."Elixir.Ret.Guardian"]
      secret_key = "<GUARDIAN_KEY>"
      issuer = "<HUB_DOMAIN>"

      [ret."Elixir.Ret.PermsToken"]
      perms_key = "<PERMS_KEY>"

      [ret."Elixir.Ret.OAuthToken"]
      oauth_token_key = ""

      [ret]
      bot_access_key = ""
      # pgrest_host = ""
      # ita_host = ""

      [ret."Elixir.Ret.MediaResolver"]
      ytdl_host = "<YTDL_HOST>"
      photomnemonic_endpoint = "<PHOTOMNEMONIC>"
      sketchfab_api_key = "<SKETCHFAB_API_KEY>"
      tenor_api_key = "<TENOR_API_KEY>"

      [ret."Elixir.Ret.Speelycaptor"]
      speelycaptor_endpoint = "<SPEELYCAPTOR>"

      [ret."Elixir.Ret.PageOriginWarmer"]
      hubs_page_origin = "https://hubs.<POD_NS>:8080/hubs/pages"
      spoke_page_origin = "https://spoke.<POD_NS>:8080/spoke/pages"
      admin_page_origin = "https://hubs.<POD_NS>:8080/hubs/pages"
      insecure_ssl = true

      [ret."Elixir.Ret.HttpUtils"]
      insecure_ssl = true

      [ret."Elixir.Ret.Storage"]
      storage_path = "/storage"
      ttl = 172800
      host = "https://<HUB_DOMAIN>"
      quota_gb = "<STORAGE_QUOTA_GB>" # example: "12"
      # ^^^ has to be string or elixir throws (ArgumentError) argument error:erlang.byte_size(#), but why

      [ret."Elixir.RetWeb.Email"]
      from = "noreply@<HUB_DOMAIN>"

      [ret."Elixir.Ret.Mailer"]
      server = "<SMTP_SERVER>"
      port = "<SMTP_PORT>"
      username = "<SMTP_USER>"
      password = "<SMTP_PASS>"

      [ret."Elixir.Ret.Support"]
      slack_webhook_url = "<SLACK_WEBHOOK>"

      [ret."Elixir.RetWeb.Plugs.AddCSP"]
      child_src = ""
      connect_src = "wss://*.stream.<HUB_DOMAIN>:4443"
      font_src = ""
      form_action = ""
      frame_src = ""
      img_src = "nearspark.reticulum.io"
      manifest_src = ""
      media_src = ""
      script_src = ""
      style_src = ""
      worker_src = ""

      [ret."Ret.Repo.Migrations.AdminSchemaInit"]
      postgrest_password = ""

      [ret."Elixir.Ret.StatsJob"]

      [ret."Elixir.RetWeb.HealthController"]

      [ret."Elixir.RetWeb.PageController"]
      skip_cache = false
      extra_avatar_headers = ""
      extra_index_headers = ""
      extra_room_headers = ""
      extra_scene_headers = ""

      extra_avatar_html = ""
      extra_index_html = ""
      extra_room_html = ""
      extra_scene_html = ""

      extra_avatar_script = ""
      extra_index_script = ""
      extra_room_script = ""
      extra_scene_script = ""

      [ret."Elixir.Ret.Account"]
      admin_email = "<ADM_EMAIL>"

      [ret."Elixir.Ret.Coturn"]
      realm = "turkey"
      public_tls_ports = "5349"

      [web_push_encryption.vapid_details]
      subject = ""
      public_key = ""
      private_key = ""

      [sentry]
      dsn = "<SENTRY_DSN>"

      [run]
      hostname_dns_suffix = "turkey"

      [hackney]
      max_connections = 250

      [ret."Elixir.Ret.Meta"]
      phx_host = "<HUB_DOMAIN>"

volumes:
  - name: storage
    hostPath:
      path: /tmp/ret_storage_data
      type: DirectoryOrCreate
  - name: config
    configMap:
      name: ret-config

volumeMounts:
  - name: storage
    mountPath: /storage
    mountPropagation: Bidirectional
  - name: config
    mountPath: /home/ret

sidecar:
  enabled: true
  name: postgrest
  image: mozillareality/postgrest
  ports:
    - containerPort: 3000
  imagePullPolicy: IfNotPresent
  env:
    - name: PGRST_LOG_LEVEL
      value: info
    - name: PGRST_DB_SCHEMA
      value: ret0_admin
    - name: PGRST_DB_ANON_ROLE
      value: postgres
    - name: PGRST_DB_URI
      valueFrom:
        secretKeyRef:
          name: configs
          key: PGRST_DB_URI
    - name: PGRST_JWT_SECRET
      valueFrom:
        secretKeyRef:
          name: configs
          key: PGRST_JWT_SECRET
  resources:
    limits:
      cpu: 500m
      memory: 256Mi
    requests:
      cpu: 250m
      memory: 128Mi
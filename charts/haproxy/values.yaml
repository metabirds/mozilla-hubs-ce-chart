# Default values for haproxy.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: haproxytech/kubernetes-ingress
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.8.5@sha256:09b59bc272e3aec5ca5b706774ed788c4bb4f184bb1d7ab99660a2b7773b0668"

env:
  - name: TZ
    value: "Etc/UTC"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

terminationGracePeriodSeconds: 60

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "haproxy-sa"

LoadBalancer:
  enabled: true
  type: LoadBalancer
  # If true, haproxy will be annotated with the external IP address(es) of the ingress controller
  spec: 
    ports:
    - name: http
      port: 80
      targetPort: 8080
    - name: https
      port: 443
      targetPort: 4443
    - name: dialog
      port: 8443
      targetPort: 4443
    - name: turn
      port: 5349
      targetPort: 5349

clusterRole:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "haproxy-cr"
  rules:
    - apiGroups:
        - ""
      resources:
        - configmaps
        - nodes
        - pods
        - namespaces
        - events
        - serviceaccounts
        - services
        - endpoints
      verbs:
        - get
        - list
        - watch
    - apiGroups:
        - "extensions"
        - "networking.k8s.io"
      resources:
        - ingresses
        - ingresses/status
        - ingressclasses
      verbs:
        - get
        - list
        - watch
    - apiGroups:
        - "extensions"
        - "networking.k8s.io"
      resources:
        - ingresses/status
      verbs:
        - update
    - apiGroups:
        - ""
      resources:
        - secrets
      verbs:
        - get
        - list
        - watch
        - create
        - patch
        - update
    - apiGroups:
        - core.haproxy.org
      resources:
        - "*"
      verbs:
        - get
        - list
        - watch
        - update
    - apiGroups:
        - "discovery.k8s.io"
      resources:
        - "*"
      verbs:
        - get
        - list
        - watch

clusterRoleBinding:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "haproxy-rb"

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  runAsUser:  1000
  runAsGroup: 1000
  capabilities:
    drop:
      - ALL
    add:
      - NET_BIND_SERVICE

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  requests:
    memory: 1Gi
    cpu: 0.5
  limits:
    memory: 2Gi
    cpu: 1
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# ConfigMaps
config:
  enabled: true
  data: 
    global-config-snippet: |
      tune.bufsize 33792
    backend-config-snippet: |
      option forwardfor 
      option http-pretend-keepalive
    ssl-redirect: "true"
    timeout-client: 30m
    timeout-client-fin: 1h
    timeout-server: 30m
    timeout-server-fin: 1h
    timeout-connect: 3s
    #access logging -- can be enabled at runtime
    syslog-server: "address:stdout, format: raw, facility:daemon"

configTCP:
  enabled: true